---
groups:
- name: dockerfiles
  jobs:
  - minimal-docker-image
  - golang-docker-image
  - deployment-docker-image
  - mkdocs-docker-image
  - releng-tools-docker-image
  - terraform-image
  - control-plane-image

resources:
- name: infrastructure-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master

- name: terraform-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master
    paths:
    - dockerfiles/terraform

- name: deployment-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master
    paths:
    - dockerfiles/deployment

- name: golang-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master
    paths:
    - dockerfiles/golang

- name: minimal-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master
    paths:
    - dockerfiles/minimal

- name: mkdocs-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master
    paths:
    - dockerfiles/mkdocs

- name: releng-tools-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry/infrastructure-ci
    branch: master
    paths:
    - dockerfiles/releng-tools

- name: ubuntu-docker-image
  type: docker-image
  source:
    repository: ubuntu
    tag: "14.04"

- name: control-plane-dockerfile
  type: git
  source:
    private_key: ((control-plane-tile-repo.private_key))
    uri: git@github.com:pivotal-cf/control-plane-tile.git
    branch: master
    paths:
    - ci/docker

- name: control-plane-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/control-plane
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: minimal-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/minimal
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: golang-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/golang
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: deployment-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/deployment
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: terraform-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/terraform
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: mkdocs-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/mkdocs
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: releng-tools-docker-image
  type: docker-image
  source:
    repository: cfinfrastructure/releng-tools
    username: ((docker_user.username))
    password: ((docker_user.password))
    email: ((docker-email))

- name: bbl-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: bosh-bootloader
    access_token: ((cf_infra_bot_user_github_access_token))

- name: bosh-cli
  type: github-release
  source:
    owner: cloudfoundry
    repository: bosh-cli
    access_token: ((cf_infra_bot_user_github_access_token))

- name: golang-linux
  type: s3
  source:
    endpoint: storage.googleapis.com
    bucket: golang
    regexp: 'go(1\.\d+(\.\d+)?)\.linux-amd64\.tar.gz'

jobs:
- name: control-plane-image
  public: true
  plan:
  - do:
    - get: infrastructure-ci
      resource: control-plane-dockerfile
      trigger: true
    - put: control-plane-docker-image
      params:
        build: infrastructure-ci/ci/docker
        cache: false

- name: minimal-docker-image
  public: true
  plan:
  - do:
    - aggregate:
      - get: ubuntu-docker-image
        trigger: true
        params:
          skip_download: true
      - get: infrastructure-ci
        resource: minimal-dockerfile
        trigger: true
    - put: minimal-docker-image
      params:
        build: infrastructure-ci/dockerfiles/minimal
        cache: false

- name: mkdocs-docker-image
  public: true
  plan:
  - do:
    - aggregate:
      - get: ubuntu-docker-image
        trigger: true
        params:
          skip_download: true
      - get: infrastructure-ci
        resource: mkdocs-dockerfile
        trigger: true
    - put: mkdocs-docker-image
      params:
        build: infrastructure-ci/dockerfiles/mkdocs
        cache: false

- name: releng-tools-docker-image
  public: true
  plan:
  - do:
    - aggregate:
      - get: infrastructure-ci
        resource: releng-tools-dockerfile
        trigger: true
    - put: releng-tools-docker-image
      params:
        build: infrastructure-ci/dockerfiles/releng-tools
        cache: false

- name: golang-docker-image
  public: true
  plan:
  - do:
    - aggregate:
      - get: minimal-docker-image
        passed: [minimal-docker-image]
        trigger: true
        params:
          skip_download: true
      - get: infrastructure-ci
        resource: golang-dockerfile
        trigger: true
      - get: ci
        resource: infrastructure-ci
      - get: golang-linux
        trigger: true
    - task: prepare-golang-docker-workspace
      file: ci/scripts/docker/prepare-golang-workspace/task.yml
      input_mapping:
        dockerfiles: infrastructure-ci
      params:
        DOCKERFILE: dockerfiles/golang/Dockerfile
    - put: golang-docker-image
      params:
        build: docker-workspace
        cache: false

- name: deployment-docker-image
  public: true
  plan:
  - do:
    - aggregate:
      - get: golang-docker-image
        passed: [golang-docker-image]
        trigger: true
        params:
          skip_download: true
      - get: infrastructure-ci
        resource: deployment-dockerfile
        trigger: true
      - get: bbl-release
        trigger: true
      - get: bosh-cli
        trigger: true
    - put: deployment-docker-image
      params:
        build: infrastructure-ci/dockerfiles/deployment
        build_args:
          GITHUB_TOKEN: ((cf_infra_bot_user_github_access_token))
        cache: false

- name: terraform-image
  public: true
  plan:
  - do:
    - aggregate:
      - get: deployment-docker-image
        passed: [deployment-docker-image]
        trigger: true
        params:
          skip_download: true
      - get: infrastructure-ci
        resource: terraform-dockerfile
        trigger: true
    - put: terraform-docker-image
      params:
        build: infrastructure-ci/dockerfiles/terraform
        cache: false
