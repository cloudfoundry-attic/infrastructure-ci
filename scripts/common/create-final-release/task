#!/bin/bash -exu

function main() {
  local root_dir
  root_dir="${1}"

  local release_name
  release_name="${2}"

  configure_bucket "${release_name}"
  create_and_commit "${root_dir}" "${release_name}"
  copy_to_output "${root_dir}"
}

function configure_bucket() {
  local release_name
  release_name="${1}"

  set +x
  ./ci/scripts/common/create-final-release/configure-final-release-bucket "${release_name}" ./oss-s3-buckets-stack ./release-repo/config
  set -x
}

function create_and_commit() {
  local root_dir
  root_dir="${1}"

  local release_name
  release_name="${2}"

  pushd "${root_dir}/release-repo" > /dev/null
    git config user.name "CF INFRASTRUCTURE BOT"
    git config user.email "cf-infrastructure@pivotal.io"

    git remote add -f master-repo "${root_dir}/release-repo-master"
    git merge "master-repo/master" -m 'Merge with master'

    local exit_status
    for i in {1..5}; do
      bosh -n --sha2 create-release --final --tarball ./consul-release-VERSION.tgz
      exit_status="${PIPESTATUS[0]}"

      if [[ "${exit_status}" == "0" ]]; then
        break
      fi
    done

    if [[ "${exit_status}" != "0" ]]; then
      echo "Failed to create ${release_name} release"
      exit "${exit_status}"
    fi

    local new_release_version
    new_release_version="$(find releases -regex ".*${release_name}-[0-9]*.yml" | egrep -o "${release_name}-[0-9]+" | egrep -o "[0-9]+" | sort -n | tail -n 1)"

    git add .final_builds releases
    git commit -m "Final release ${new_release_version}"

    set_tarball_version

    echo "${new_release_version}" > version_number
    echo "v${new_release_version}" > release_name
  popd > /dev/null
}

function set_tarball_version() {
    mv ./consul-release-{VERSION,${new_release_version}}.tgz
}

function copy_to_output() {
  local root_dir
  root_dir="${1}"

  shopt -s dotglob
  cp -R "${root_dir}/release-repo/"* "${root_dir}/final-release-repo"
}

main "${PWD}" "${RELEASE_NAME}"
