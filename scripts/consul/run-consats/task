#!/bin/bash -exu

export ROOT="${PWD}"
export CONSUL_RELEASE_VERSION="99999+dev.$(date +%s)"
export STEMCELL_VERSION="$(cat ${ROOT}/stemcell/version)"
export TURBULENCE_RELEASE_VERSION="$(cat ${ROOT}/turbulence-release/version)"
export LATEST_CONSUL_RELEASE_VERSION="$(cat ${ROOT}/latest-consul-release/version)"

function main() {
  setup_bosh_env_vars

  upload_stemcell
  if $WINDOWS_CLIENTS; then
    upload_windows_stemcell
  fi

  upload_releases
  generate_manifest
  force_compilation

  bosh -d consats -n deploy "${ROOT}/consats.yml"
  bosh -d consats run-errand acceptance-tests

  cleanup_deployment "consul"
  cleanup_deployment "turbulence"

  bosh -n clean-up --all
}

function setup_bosh_env_vars() {
  set +x
  pushd "${ROOT}/bbl-states-repo/${BBL_STATE_DIR}" > /dev/null
    eval "$(bbl print-env)"
    export JUMPBOX_URL="$(bbl jumpbox-address):22"
  popd > /dev/null
  set -x
}

function upload_stemcell() {
  pushd "${ROOT}/stemcell" > /dev/null
    bosh upload-stemcell stemcell.tgz
  popd > /dev/null
}

function upload_windows_stemcell() {
  pushd "${ROOT}/windows-stemcell" > /dev/null
    bosh upload-stemcell light-bosh-stemcell-*-google-kvm-windows2012R2-go_agent.tgz
  popd > /dev/null
}

function upload_releases() {
  pushd "${ROOT}/turbulence-release" > /dev/null
    bosh upload-release release.tgz
  popd > /dev/null

  pushd "${ROOT}/consul-release" > /dev/null
    bosh -n --sha2 create-release --force --version "${CONSUL_RELEASE_VERSION}"
    bosh upload-release
  popd > /dev/null

  pushd "${ROOT}/latest-consul-release" > /dev/null
    bosh upload-release release.tgz
  popd > /dev/null
}

function force_compilation() {
  pushd /tmp > /dev/null
    sed  -e "s/CONSUL_RELEASE_VERSION/${CONSUL_RELEASE_VERSION}/g" \
      -e "s/TURBULENCE_RELEASE_VERSION/${TURBULENCE_RELEASE_VERSION}/g" \
      -e "s/STEMCELL_VERSION/${STEMCELL_VERSION}/g" \
      "${ROOT}/ci/scripts/consul/run-consats/fixtures/consul_compilation.yml" > "consul_compilation.yml"

    bosh -d compilation -n deploy consul_compilation.yml
    bosh -d compilation export-release "consul/${CONSUL_RELEASE_VERSION}" "ubuntu-trusty/${STEMCELL_VERSION}"
    bosh -d compilation export-release "turbulence/${TURBULENCE_RELEASE_VERSION}" "ubuntu-trusty/${STEMCELL_VERSION}"
    bosh -d compilation -n delete-deployment
  popd > /dev/null
}

function generate_manifest() {
  mkdir -p "${ROOT}/consul-release/aws"
  mkdir -p "${GOPATH}/src/github.com/cloudfoundry"

  pushd "${GOPATH}/src/github.com/cloudfoundry" > /dev/null
    ln -s "${ROOT}/ci" "infrastructure-ci"

    pushd "${GOPATH}/src/github.com/cloudfoundry/infrastructure-ci" > /dev/null
      go run \
        "./scripts/consul/run-consats/generate_manifest.go" \
        "${ROOT}/consul-release/manifests/consats.yml" \
        > "${ROOT}/consats.yml"
    popd > /dev/null
  popd > /dev/null
}

function cleanup_deployment() {
  local deployment_prefix
  deployment_prefix="${1}"

  for i in $(bosh deployments | grep "${deployment_prefix}" | awk '{ print $1 }' | uniq); do
    bosh -d $i -n delete-deployment
  done

  test -z "$(bosh deployments | grep "${deployment_prefix}")"
}

function teardown() {
  set +e
  bosh -d consats -n delete-deployment
  bosh -d consats -n delete-release consul
  pkill ssh || true
  set -e
}

trap teardown EXIT

main
